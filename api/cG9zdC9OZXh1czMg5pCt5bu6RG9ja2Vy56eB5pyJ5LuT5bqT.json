{"title":"","date":"2019-08-15T01:53:31.272Z","slug":"Nexus3 搭建Docker私有仓库","updated":"2019-08-15T02:00:34.671Z","content":"<h1 id=\"Nexus3最佳实践系列-搭建Docker私有仓库\">Nexus3最佳实践系列: 搭建Docker私有仓库<a href=\"post/Nexus3 搭建Docker私有仓库#Nexus3最佳实践系列-搭建Docker私有仓库\"></a></h1><p>容器仓库是容器化管理中非常重要的一环，相当于SVN在程序研发、运维发布中的地位。因此，一个稳定、可靠的容器仓库尤为重要。</p>\n<p>目前我知道的的数据仓库有：</p>\n<ul>\n<li>Docker官方的Registry原生仓库</li>\n<li>SuSE团队推出的出的Portus：<a href=\"https://github.com/SUSE/Portus\" target=\"_blank\" rel=\"noopener\">https://github.com/SUSE/Portus</a></li>\n<li>VMWare中国团队推出的企业级仓库—Harbor</li>\n<li>大家熟知的Maven私服：Sonatype Nexus3</li>\n</ul>\n<p>本文主要介绍下Sonatype Nexus 3这个功能强大的产品，它不仅能够用于创建Maven私服，还可以用来创建yum、pypi、npm、nuget、rubygems等各种私有仓库。而且，Nexus从3.0版本也开始支持创建Docker镜像仓库了！</p>\n<p>因此，在上述几个产品里面我毫不犹豫的选择了Nexus3作为部门的公共数据仓库，一举多得。</p>\n<h2 id=\"一、部署\">一、部署<a href=\"post/Nexus3 搭建Docker私有仓库#一、部署\"></a></h2><p>这里依然使用最简单的Docker化部署，过程非常之简单！在一台有外网的机器上安装好Docker之后，执行如下启动脚本即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>!/bin/bash</span><br><span class=\"line\">docker run -dti \\</span><br><span class=\"line\">        --net=host \\</span><br><span class=\"line\">        --name=nexus \\</span><br><span class=\"line\">        --privileged=true \\</span><br><span class=\"line\">        --restart=always \\</span><br><span class=\"line\">        -e INSTALL4J_ADD_VM_PARAMS=\"-Xms4g -Xmx4g -XX:MaxDirectMemorySize=8g\" \\ # 如果不需要限制java内存请删除此行</span><br><span class=\"line\">        -v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">        -v /data/nexus:/nexus-data \\</span><br><span class=\"line\">        sonatype/nexus3:latest</span><br></pre></td></tr></table></figure>\n<p>大概2分钟左右可以完成启动，此时可以通过浏览器访问 <code>http://IP地址:8081</code>即可出现nexus的web界面：</p>\n<p>[<img src=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexus1.jpg?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></p>\n<h2 id=\"二、配置\">二、配置<a href=\"post/Nexus3 搭建Docker私有仓库#二、配置\"></a></h2><h3 id=\"1、配置Blob存储\">1、配置Blob存储<a href=\"post/Nexus3 搭建Docker私有仓库#1、配置Blob存储\"></a></h3><p>点击右上角的Sign in，输入默认账号密码：admin/admin123 登录到管理员身份。</p>\n<p>打开控制页面的按钮，默认进入了仓库配置界面，选择Blob Stores开始创建存储空间：</p>\n<p><a href=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexus2.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexus2.jpg?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></a></p>\n<p><a href=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexus4.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexus4.jpg?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></a></p>\n<p>我这边创建了如下Blob，以备后用：</p>\n<p><a href=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexus3.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexus3.jpg?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></a></p>\n<h3 id=\"2、创建Docker仓库\">2、创建Docker仓库<a href=\"post/Nexus3 搭建Docker私有仓库#2、创建Docker仓库\"></a></h3><p>回到前面的repository界面，点击repositories打开页面后点击【create repository】打开仓库类型选择界面（真的非常丰富！）：</p>\n<p><a href=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexu5.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexu5.jpg?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></a></p>\n<p>可以看到Docker有三种类型，分别是docker(group)，docker(hosted)，docker(proxy)。其含义解释如下：</p>\n<ul>\n<li>hosted : 本地存储，即同docker官方仓库一样提供本地私服功能</li>\n<li>proxy : 提供代理其他仓库的类型，如docker中央仓库</li>\n<li>group : 组类型，实质作用是组合多个仓库为一个地址</li>\n</ul>\n<p>下面开始创建Docker仓库：</p>\n<p>首先，我们创建一个docker代理仓库，点击docker(proxy)，如图填写信息：</p>\n<p><a href=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexus6.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.zgboke.com/wp-content/uploads/2018/07/nexus6.jpg?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></a></p>\n<p>往下翻页，勾上 “Allow clients to use the V1 API to interact with this Repository”，允许Docker V1 API请求。</p>\n<p>至于代理的对象，我可以选择官方的镜像地址：<a href=\"https://registry-1.docker.io，但是官方的比较慢，所以这里我们可以填写国内的Docker镜像加速器地址，比如阿里云或*DaoCloud的容器加速：\" target=\"_blank\" rel=\"noopener\">https://registry-1.docker.io，但是官方的比较慢，所以这里我们可以填写国内的Docker镜像加速器地址，比如阿里云或*DaoCloud的容器加速：</a>*</p>\n<p><a href=\"https://res.zgboke.com/wp-content/uploads/2018/09/nexus7.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.zgboke.com/wp-content/uploads/2018/09/nexus7.png?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></a></p>\n<p>我这里选择了DaoCloud的镜像加速，这里为了确保能够拉取DockerHub最新的镜像，我选择了Use DockerHub 这个Index。</p>\n<p>接着，再创建一个本地仓库，这里比较简单，只需要填写本地仓库的名称，比如 docker-hosted，然后填写HTTP端口即可，比如8083：</p>\n<p><a href=\"https://res.zgboke.com/wp-content/uploads/2018/09/nexus8.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.zgboke.com/wp-content/uploads/2018/09/nexus8.png?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></a></p>\n<p>保存之后，最后创建一个聚合仓库（group），将代理仓库和本地仓库聚合到一起使用，这里我命名为docker，然后端口选择8082：</p>\n<p><a href=\"https://res.zgboke.com/wp-content/uploads/2018/09/nexus9.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.zgboke.com/wp-content/uploads/2018/09/nexus9.png?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></a></p>\n<p>这里成员仓库的顺序可以稍微规划下，一般来说将本地的放前面，代理第三方的放后面，好处就是优先使用本地或小众的镜像仓库。我这边是用了多个第三方仓库，所有有多个：</p>\n<p><a href=\"https://res.zgboke.com/wp-content/uploads/2018/09/nexus10.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.zgboke.com/wp-content/uploads/2018/09/nexus10.png?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></a></p>\n<p>至此，nexus在docker这一块是部署已经完成了，但是这样并不能很好的使用。因为group仓库并不能推送镜像，因为你推送自己制作的镜像到仓库还得通过本地仓库的端口去推送，很不方便！</p>\n<p>下面分享一下我这边原创的解决方法：通过Nginx来判断推镜像还是拉镜像，然后代理到不同端口，解决这个问题，还是非常巧妙的。</p>\n<h3 id=\"3、配置Nginx\">3、配置Nginx<a href=\"post/Nexus3 搭建Docker私有仓库#3、配置Nginx\"></a></h3><p>在部署Nginx部分，我们先需要生成自签名SSL证书，因为后面不想在docker pull的时候还要带一个端口！这里我们需要2个域名，一个用来展示nexus前台，另一个用做docker仓库，比如：</p>\n<p>nexus前台：repo.xxx.com</p>\n<p>docker仓库：idocker.io</p>\n<p>生成自签名SSL证书的方法网上很多，这里推荐一个一键生成工具，大家可以尝试使用：<a href=\"https://zhang.ge/goto/aHR0cHM6Ly9naXRodWIuY29tL0Zpc2hkcm93bmVkL3NzbA==\" target=\"_blank\" rel=\"noopener\">https://github.com/Fishdrowned/ssl</a> ，使用方法请参考作者说明。</p>\n<p>Ps：如果你打算做外网仓库服务，那也可以去申请一个免费SSL证书，我这边是内部oa域名使用，所以只能用自签名证书了。</p>\n<p>Nginx的规则如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream nexus_web &#123;</span><br><span class=\"line\">    server 192.168.1.100:8081;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">upstream nexus_docker_get &#123;</span><br><span class=\"line\">    server 192.168.1.100:8082;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">upstream nexus_docker_put &#123;</span><br><span class=\"line\">    server 192.168.1.100:8083;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name idocker.io;</span><br><span class=\"line\">    access_log /data/wwwlogs/idocker.io.log access_log_json;</span><br><span class=\"line\">    # 证书</span><br><span class=\"line\">    ssl_certificate /data/wwwroot/ssl/out/idocker.io/idocker.io.crt;</span><br><span class=\"line\">    ssl_certificate_key /data/wwwroot/ssl/out/idocker.io/idocker.io.key.pem;</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    # disable any limits to avoid HTTP 413 for large image uploads</span><br><span class=\"line\">    client_max_body_size 0;</span><br><span class=\"line\">    # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)</span><br><span class=\"line\">    chunked_transfer_encoding on;</span><br><span class=\"line\">    # 设置默认使用推送代理</span><br><span class=\"line\">    set $upstream \"nexus_docker_put\";</span><br><span class=\"line\">    # 当请求是GET，也就是拉取镜像的时候，这里改为拉取代理，如此便解决了拉取和推送的端口统一</span><br><span class=\"line\">    if ( $request_method ~* 'GET') &#123;</span><br><span class=\"line\">        set $upstream \"nexus_docker_get\";</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 只有本地仓库才支持搜索，所以将搜索请求转发到本地仓库，否则出现500报错</span><br><span class=\"line\">    if ($request_uri ~ '/search') &#123;</span><br><span class=\"line\">        set $upstream \"nexus_docker_put\"; </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">            proxy_pass http://$upstream;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            proxy_connect_timeout 3600;</span><br><span class=\"line\">            proxy_send_timeout 3600;</span><br><span class=\"line\">            proxy_read_timeout 3600;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_buffering off;</span><br><span class=\"line\">            proxy_request_buffering off;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-Proto http;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name repo.xxx.com;</span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    ssl_certificate /data/wwwroot/ssl/out/repo.xxx.com/repo.xxx.com.crt;</span><br><span class=\"line\">    ssl_certificate_key /data/wwwroot/ssl/out/repo.xxx.com/repo.xxx.com.key.pem;</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    access_log /data/wwwlogs/repo.xxx.com.log access_log_json;</span><br><span class=\"line\">    location /download &#123;</span><br><span class=\"line\">        root /data/wwwroot/repo.xxx.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">            proxy_pass http://nexus_web;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            client_max_body_size 512m;</span><br><span class=\"line\">            proxy_connect_timeout 3600;</span><br><span class=\"line\">            proxy_send_timeout 3600;</span><br><span class=\"line\">            proxy_read_timeout 3600;</span><br><span class=\"line\">            proxy_buffering off;</span><br><span class=\"line\">            proxy_request_buffering off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Nginx部署完成之后，我们还需要将自签名的根证书（ca.crt）导入到客户端才可以正常使用，否则会报不信任错误。</p>\n<p>在上文介绍的一键生成自签名工具中，会生成一个根证书，名称为ca.crt，我们将这个文件上传到客户端服务器的 /etc/docker/certs.d/idocker.io 目录即可（注意目录需要创建，最后的文件夹名称和仓库域名保持一致：idocker.io）。</p>\n<p>为了方便后面的人使用，我将上述部署证书的过程弄成一个在线脚本，实现快速部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream nexus_web &#123;</span><br><span class=\"line\">    server 192.168.1.100:8081;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">upstream nexus_docker_get &#123;</span><br><span class=\"line\">    server 192.168.1.100:8082;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">upstream nexus_docker_put &#123;</span><br><span class=\"line\">    server 192.168.1.100:8083;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name idocker.io;</span><br><span class=\"line\">    access_log /data/wwwlogs/idocker.io.log access_log_json;</span><br><span class=\"line\">    # 证书</span><br><span class=\"line\">    ssl_certificate /data/wwwroot/ssl/out/idocker.io/idocker.io.crt;</span><br><span class=\"line\">    ssl_certificate_key /data/wwwroot/ssl/out/idocker.io/idocker.io.key.pem;</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    # disable any limits to avoid HTTP 413 for large image uploads</span><br><span class=\"line\">    client_max_body_size 0;</span><br><span class=\"line\">    # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)</span><br><span class=\"line\">    chunked_transfer_encoding on;</span><br><span class=\"line\">    # 设置默认使用推送代理</span><br><span class=\"line\">    set $upstream \"nexus_docker_put\";</span><br><span class=\"line\">    # 当请求是GET，也就是拉取镜像的时候，这里改为拉取代理，如此便解决了拉取和推送的端口统一</span><br><span class=\"line\">    if ( $request_method ~* 'GET') &#123;</span><br><span class=\"line\">        set $upstream \"nexus_docker_get\";</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 只有本地仓库才支持搜索，所以将搜索请求转发到本地仓库，否则出现500报错</span><br><span class=\"line\">    if ($request_uri ~ '/search') &#123;</span><br><span class=\"line\">        set $upstream \"nexus_docker_put\"; </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">            proxy_pass http://$upstream;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            proxy_connect_timeout 3600;</span><br><span class=\"line\">            proxy_send_timeout 3600;</span><br><span class=\"line\">            proxy_read_timeout 3600;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_buffering off;</span><br><span class=\"line\">            proxy_request_buffering off;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-Proto http;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name repo.xxx.com;</span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    ssl_certificate /data/wwwroot/ssl/out/repo.xxx.com/repo.xxx.com.crt;</span><br><span class=\"line\">    ssl_certificate_key /data/wwwroot/ssl/out/repo.xxx.com/repo.xxx.com.key.pem;</span><br><span class=\"line\">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    access_log /data/wwwlogs/repo.xxx.com.log access_log_json;</span><br><span class=\"line\">    location /download &#123;</span><br><span class=\"line\">        root /data/wwwroot/repo.xxx.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">            proxy_pass http://nexus_web;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            client_max_body_size 512m;</span><br><span class=\"line\">            proxy_connect_timeout 3600;</span><br><span class=\"line\">            proxy_send_timeout 3600;</span><br><span class=\"line\">            proxy_read_timeout 3600;</span><br><span class=\"line\">            proxy_buffering off;</span><br><span class=\"line\">            proxy_request_buffering off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>脚本保存为 docker_init.sh，上传到nginx服务器的 /data/wwwroot/repo.xxx.com/download/cert 目录即可。</p>\n<p>最终，我们可以使用如下命令行一键部署docker证书：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL http://repo.xxx.com/download/scripts/docker_init.sh | sh -s</span><br></pre></td></tr></table></figure>\n<p>是不是非常方便？</p>\n<h3 id=\"4、关于高可用\">4、关于高可用<a href=\"post/Nexus3 搭建Docker私有仓库#4、关于高可用\"></a></h3><p><a href=\"https://res.zgboke.com/wp-content/uploads/2018/09/nexus11.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.zgboke.com/wp-content/uploads/2018/09/nexus11.png?w=480\" alt=\"Nexus3最佳实践系列：搭建Docker私有仓库\"></a></p>\n<p>相信用心的同学已经注意到了，Nexus3存在一个单点问题。在看完官方文档后，发现Nexus3的免费版本仅支持单点，只有收费版才支持集群模式：</p>\n<p>在高可用方面，我前后做了2个尝试：</p>\n<p>①、将数据保存到ceph分布式存储：能用，但是push的速度实在不敢恭维！layer文件越小越慢。</p>\n<p>②、折中方案：另外部署一个节点，每隔一段时间将主节点数据同步过去，然后备份节点每隔一段时间重启一次（不重启的话数据不会更新），并且数据再同步一份到ceph确保安全。在Nginx中，将备份节点加入到backup，当主节点宕机的时候，备机可以顶上来继续使用。</p>\n<p>当然， 觉得这样做还不够的同学也可以参考官方的备份文档进一步优化：<a href=\"https://zhang.ge/goto/aHR0cHM6Ly9oZWxwLnNvbmF0eXBlLmNvbS9yZXBvbWFuYWdlcjMvaGlnaC1hdmFpbGFiaWxpdHkvZGVzaWduaW5nLXlvdXItY2x1c3Rlci1iYWNrdXAtcmVzdG9yZS1wcm9jZXNz\" target=\"_blank\" rel=\"noopener\">https://help.sonatype.com/repomanager3/high-availability/designing-your-cluster-backup-restore-process</a></p>\n<h2 id=\"三、小结\">三、小结<a href=\"post/Nexus3 搭建Docker私有仓库#三、小结\"></a></h2><p>docker仓库的使用我就不再赘述了，nexus我们使用的是group这个聚合仓库，本地没有的镜像会去外网搜索，如果存在则拉取并缓存到本地，下次再拉取则直接使用缓存数据。所以，在拉取外网的镜像时，第一次会比较慢，第二次就和本地基本一致了。</p>\n<p>上文提到，Nexus还有其他很多实用仓库，比如yum、python、npm、maven等等。我所在的部门也全部用到了，非常好用！感兴趣的同学可以自己去尝试配置，都非常直观简单！当然，后面有空我也会整理一下各个种类仓库的最佳实践，比如各种仓库一键初始化的经验，敬请期待！</p>\n","next":{"title":"","slug":"centOS目录结构详细版"},"link":"http://yoursite.com/post/Nexus3 搭建Docker私有仓库/","toc":[{"title":"Nexus3最佳实践系列: 搭建Docker私有仓库","id":"Nexus3最佳实践系列-搭建Docker私有仓库","index":"1","children":[{"title":"一、部署","id":"一、部署","index":"1.1"},{"title":"二、配置","id":"二、配置","index":"1.2","children":[{"title":"1、配置Blob存储","id":"1、配置Blob存储","index":"1.2.1"},{"title":"2、创建Docker仓库","id":"2、创建Docker仓库","index":"1.2.2"},{"title":"3、配置Nginx","id":"3、配置Nginx","index":"1.2.3"},{"title":"4、关于高可用","id":"4、关于高可用","index":"1.2.4"}]},{"title":"三、小结","id":"三、小结","index":"1.3"}]}]}